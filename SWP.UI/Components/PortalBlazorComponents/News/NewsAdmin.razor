
@if (Store.Loading)
{
    <LoaderComponent Message="@Store.LoadingMessage"></LoaderComponent>
}
else
{
<EditForm Model="@Store.GetState().DataModel" OnValidSubmit="@SubmitNews">
    <DataAnnotationsValidator />

    <label>Title</label>
    <InputText @bind-Value="@Store.GetState().DataModel.Title" />
    <ValidationMessage For="@(() => Store.GetState().DataModel.Title)"></ValidationMessage>

    <label>Description</label>
    <InputText @bind-Value="@Store.GetState().DataModel.Description" />
    <ValidationMessage For="@(() => Store.GetState().DataModel.Description)"></ValidationMessage>

    <label>Tags</label>
    <InputText @bind-Value="@Store.GetState().DataModel.Tags" />
    <ValidationMessage For="@(() => Store.GetState().DataModel.Tags)"></ValidationMessage>

    <label>
        Category:
    </label>
    <InputSelect @bind-Value="@Store.GetState().DataModel.Category">
        @foreach (var category in Store.GetState().DataModel.Categories)
            {
            <option value="@(category)">@category</option>
            }
    </InputSelect>

    <RadzenHtmlEditor Name="BodyEditor" @bind-Value=@Store.GetState().DataModel.Body style="height: 500px; margin-bottom: 1rem;">
        <RadzenHtmlEditorUndo />
        <RadzenHtmlEditorRedo />
        <RadzenHtmlEditorSeparator />
        <RadzenHtmlEditorBold />
        <RadzenHtmlEditorItalic />
        <RadzenHtmlEditorUnderline />
        <RadzenHtmlEditorStrikeThrough />
        <RadzenHtmlEditorSeparator />
        <RadzenHtmlEditorAlignLeft />
        <RadzenHtmlEditorAlignCenter />
        <RadzenHtmlEditorAlignRight />
        <RadzenHtmlEditorJustify />
        <RadzenHtmlEditorSeparator />
        <RadzenHtmlEditorIndent />
        <RadzenHtmlEditorOutdent />
        <RadzenHtmlEditorUnorderedList />
        <RadzenHtmlEditorOrderedList />
        <RadzenHtmlEditorSeparator />
        <RadzenHtmlEditorColor />
        <RadzenHtmlEditorBackground />
        <RadzenHtmlEditorRemoveFormat />
        <RadzenHtmlEditorSeparator />
        <RadzenHtmlEditorSubscript />
        <RadzenHtmlEditorSuperscript />
        <RadzenHtmlEditorSeparator />
        <RadzenHtmlEditorLink />
        <RadzenHtmlEditorUnlink />
        <RadzenHtmlEditorFontName />
        <RadzenHtmlEditorFontSize />
        <RadzenHtmlEditorFormatBlock />
    </RadzenHtmlEditor>
    <ValidationMessage For="@(() => Store.GetState().DataModel.Body)"></ValidationMessage>

    <p>
        <InputFile OnChange="@OnInputFileChange" />

    </p>
    @if (string.IsNullOrEmpty(Store.GetState().DataModel.ImageName))
    {
        <p>Image is requred!</p>
    }

    <button type="submit">Submit</button>
</EditForm>
}

@*<label>
        Description (optional):
        <InputTextArea @bind-Value="starship.Description" />
    </label>*@


@*<form method="post" enctype="multipart/form-data">

        <div>
            <label>Body</label>
            <textarea id="editor" asp-for="DataModel.Body"></textarea>
        </div>
        <div>
            <label>Image</label>
            <input asp-for="DataModel.ImagePath" type="hidden" />
            <input asp-for="DataModel.Image" />
            @if (!string.IsNullOrEmpty(Model.DataModel.ImagePath))
            {
                <label>Current Image: @Model.DataModel.ImagePath</label>
            }
        </div>
        <input type="submit" value="Submit" />
    </form>*@
