
@if (Store.Loading)
{
    <LoaderComponent Message="@Store.LoadingMessage"></LoaderComponent>
}
else
{
    <div class="list-row">
        <button @onclick="Store.RefreshSore" class="refresher @(Store.Loading ? "spin" : "")"><img src="Images/icons8-synchronize-40.png" /></button>
    </div>

    @if (MainStore.GetState().Clients.Count != 0)
    {
        <div class="flex-my-app">
            @if (Store.GetState().ProductivityData.Count != 0)
            {
                <div class="app-chart app-balance ">
                    <i><img src="/Images/icons8-profit-40.png" /></i>
                    @if (MainStore.GetState().ActiveClient == null)
                    {
                        <h3>Całkowity Bilans Kancelarii</h3>
                        <h5>@Store.GetState().TotalBalance.FormatPLN()</h5>
                    }
                    else
                    {
                        <h3>Bilans Klienta: @MainStore.GetState().ActiveClient.Name</h3>
                        <h5>@Store.GetState().TotalBalance.FormatPLN()</h5>
                    }
                </div>
            }
            @if (Store.GetState().ProductivityData.Count != 0)
            {<div class="app-chart app-balance ">
                    <i><img src="/Images/icons8-initiate-money-transfer-40.png" /></i>
                    @if (MainStore.GetState().ActiveClient == null)
                    {
                        <h3>Całkowite Koszty Kancelarii</h3>
                        <h5>@Store.GetState().TotalExpenses.FormatPLN()</h5>
                    }
                    else
                    {
                        <h3>Koszty Klienta: @MainStore.GetState().ActiveClient.Name</h3>
                        <h5>@Store.GetState().TotalExpenses.FormatPLN()</h5>
                    }

                </div>
            }

            @if (Store.GetState().ProductivityData.Count != 0)
            {<div class="app-chart app-balance ">
                    <i><img src="/Images/icons8-timesheet-36.png" /></i>
                    @if (MainStore.GetState().ActiveClient == null)
                    {
                        <h3>Czas poświęcony Klientom</h3>
                        <h5>@Store.GetState().TotalTimeSpent</h5>
                    }
                    else
                    {
                        <h3>Całkowity Czas na Kliencie: @MainStore.GetState().ActiveClient.Name</h3>
                        <h5>@Store.GetState().TotalTimeSpent</h5>
                    }

                </div>
            }
            @if (Store.GetState().ProductivityData.Count != 0)
            {<div class="app-chart app-balance ">
                    <i><img src="/Images/icons8-paycheque-36.png" /></i>
                    @if (MainStore.GetState().ActiveClient == null)
                    {
                        <h3>Zysk na godzinę</h3>
                        <h5>@Store.GetState().TotalTimeSpent</h5>
                    }
                    else
                    {
                        <h3>Zysk na godzinę: @MainStore.GetState().ActiveClient.Name</h3>
                        <h5>@Store.GetState().TotalTimeSpent</h5>
                    }

                </div>
            }

        </div>

        @if (Store.GetState().ProductivityData.Count != 0)
        {<div class="flex-app">
                <div class="app-chart app-line-chart app-line-chart-1 grid">
                    <h3>Bilans w PLN</h3>
                    <RadzenChart ColorScheme="@Store.GetState().ColorScheme">
                        @foreach (var data in Store.GetState().ProductivityData)
                        {
                            <RadzenLineSeries Smooth="true" Data="@data.DataByDate" CategoryProperty="Date" Title="@data.Name" LineType="LineType.Solid" ValueProperty="Number">
                                <RadzenMarkers MarkerType="MarkerType.Circle" />
                            </RadzenLineSeries>
                        }
                        <RadzenCategoryAxis Padding="20" FormatString="{0:MMM}" />
                        <RadzenValueAxis Formatter="@FormatAsPLN">
                            <RadzenGridLines Visible="true" />
                            <RadzenAxisTitle Text="Bilans w PLN" />
                        </RadzenValueAxis>
                        <RadzenLegend Visible="false" />
                    </RadzenChart>

                </div>

                <div class="app-chart app-line-chart app-line-chart-2 grid">
                    <h3>Zestawienie Kosztów</h3>
                    <RadzenChart ColorScheme="@Store.GetState().ColorScheme">
                        @foreach (var data in Store.GetState().ProductivityData)
                        {
                            <RadzenLineSeries Data="@data.DataByDate" CategoryProperty="Date" Title="@data.Name" ValueProperty="Expenses">
                                <RadzenMarkers MarkerType="MarkerType.Circle" />
                            </RadzenLineSeries>
                        }

                        <RadzenCategoryAxis Padding="20" FormatString="{0:MMM}" />

                        <RadzenValueAxis Formatter="@FormatAsPLN">
                            <RadzenGridLines Visible="true" />
                            <RadzenAxisTitle Text="Koszty w PLN" />
                        </RadzenValueAxis>
                        <RadzenLegend Visible="false" />
                    </RadzenChart>

                </div>
            </div>
            <div class="flex-app">
                <div class="app-chart app-line-chart app-line-chart-3 grid">
                    <h3>Czas poświęcony Klientom</h3>
                    <RadzenChart ColorScheme="@Store.GetState().ColorScheme">
                        @foreach (var data in Store.GetState().ProductivityData)
                        {
                            <RadzenLineSeries Data="@data.DataByDate" CategoryProperty="Date" Title="@data.Name" LineType="LineType.Solid" ValueProperty="TimeNumber">
                                <RadzenMarkers MarkerType="MarkerType.Circle" />
                            </RadzenLineSeries>
                        }

                        <RadzenCategoryAxis Padding="20" FormatString="{0:MMM}" />
                        <RadzenValueAxis Formatter="@FormatAsTime">
                            <RadzenGridLines Visible="true" />
                            <RadzenAxisTitle Text="Czas poświęcony klientom" />
                        </RadzenValueAxis>
                        <RadzenLegend Visible="false" />
                    </RadzenChart>

                </div>
                <div class="app-chart app-line-chart app-line-chart-4 grid">
                    <h3>Zysk na godzinę</h3>
                    <RadzenChart ColorScheme="@Store.GetState().ColorScheme">
                        @foreach (var data in Store.GetState().ProductivityData)
                        {
                            <RadzenLineSeries Smooth="true" Data="@data.DataByDate" CategoryProperty="Date" Title="@data.Name" LineType="LineType.Solid" ValueProperty="ProductivityRatio">
                                <RadzenMarkers MarkerType="MarkerType.Circle" />
                            </RadzenLineSeries>
                        }

                        <RadzenCategoryAxis Padding="20" FormatString="{0:MMM}" />
                        <RadzenValueAxis Formatter="@FormatAsPLN">
                            <RadzenGridLines Visible="true" />
                            <RadzenAxisTitle Text="PLN / godzinę" />
                        </RadzenValueAxis>
                        <RadzenLegend Visible="false" />
                    </RadzenChart>
                </div>

            </div>


        }
        else
        {
            <h2>Aby zobaczyć statystyki wprowadź dane do sekcji Finanse i Produktywność</h2>
        }


    }
    else
    {
        <h2>Nie masz jeszcze zadnych klientow!</h2>
    }
}
