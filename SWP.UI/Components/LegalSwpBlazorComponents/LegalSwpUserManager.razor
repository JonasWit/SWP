




@*<div class="col-xl-6 mb-5">
    <h3>ListBox with multiple selection</h3>
    <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@multipleValues Multiple="true" Data=@customers
                   TextProperty="CompanyName" ValueProperty="CustomerID" Change=@(args => OnChange(args, "ListBox with multiple selection")) Style="height:200px" />
</div>*@








<div class="list-row">
    <div class="list-row">
        <strong class="label">Wybierz profil: </strong><RadzenDropDown AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true" @bind-Value="RelatedUsersFilterValue" Data="@MainStore.GetState().AppActiveUserManager.RelatedUsers" TextProperty="UserName" ValueProperty="Id" Style="width: 200px; padding: 0" Change="@(args => SelectedUserChange(args))" />
    </div>

    <div class="list-row">
        <button @onclick="StateHasChanged" class="refresher @(Store.Loading ? "spin" : "")"><img src="Images/icons8-synchronize-40.png" /></button>
    </div>

</div>


@*<RadzenButton Text="TEST!" Click="MainStore.ThrowTestException"></RadzenButton>*@
<div class="list-row">
    @if (Store.GetState().SelectedUser != null && MainStore.GetState().AppActiveUserManager.IsRoot && MainStore.GetState().AppActiveUserManager.User.Id != Store.GetState().SelectedUser.Id)
    {

        <h1>Mozna skasowac</h1>
        <RadzenButton Text="Usuń powiązanie!" Click="RemoveRelation"></RadzenButton>
    }

    @if (MainStore.GetState().AppActiveUserManager.IsRoot)
    {
        <p class="label">Usuń wszystkie dane powiązane z wybranym profilem</p>
        <RadzenButton ButtonStyle="ButtonStyle.Secondary" Text=@($"Usuń") Click="ConfirmRemoveAllData" />
    }


</div>
