@inject GeneralViewModel generalViewModel

@if (App.ActiveClientWithData == null)
{
    <h2>In order to see tasks please select a client!</h2>
}
else
{
    <h2>Zarządzaj zadaniami klienta: @App.ActiveClientWithData.Name</h2>

    <div class="row justify-content-center">
        <RadzenTemplateForm Data="@App.ClientJobsPage.NewClientJob" Submit="@(async (CreateClientJob.Request args) => { await App.ClientJobsPage.SubmitNewClientJob(args); })">
            <div class="row">
                <RadzenFieldset Text="Nowe Zadanie">
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Nazwa" />
                        </div>
                        <div class="col-md-8">
                            <RadzenTextBox Placeholder="Nazwa..." @bind-Value="App.ClientJobsPage.NewClientJob.Name" Name="Nazwa" />
                            <RadzenRequiredValidator Component="Nazwa" Text="Nazwa nie może być pusta!" Popup="true" />
                            <RadzenLengthValidator Max="50" Text="Maksymalnie 50 znaków!" Component="Nazwa" Popup="true" Style="position: absolute" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Opis" />
                        </div>
                        <div class="col-md-8">
                            <RadzenTextArea Placeholder="Opis..." Style="margin-bottom: 30px" @bind-Value="App.ClientJobsPage.NewClientJob.Description" Name="Description" />
                            <RadzenLengthValidator Max="500" Text="Maksymalnie 500 znaków!" Component="Description" Popup="true" Style="position: absolute" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Priorytet" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="App.ClientJobsPage.NewClientJob.Priority" Data="@generalViewModel.Priorities" TextProperty="Number" ValueProperty="Number" Style="width:100%" />
                        </div>
                    </div>
                    <div class="row justify-content-center">
                        <div class="d-flex justify-content-center">
                            <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Dodaj Zadanie" />
                        </div>
                    </div>
                </RadzenFieldset>
            </div>
        </RadzenTemplateForm>
    </div>

    <div class="row justify-content-center">
        <RadzenGrid @ref="App.ClientJobsPage.ClientsJobsGrid" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true" RowSelect="@(args => App.ClientJobsPage.ActiveJobChange(args))"
                    Data="@App.ActiveClientWithData.Jobs" TItem="ClientJobViewModel" RowUpdate="@App.ClientJobsPage.OnUpdateClientJobRow">
            <Columns>
                <RadzenGridColumn TItem="ClientJobViewModel" Property="Name" Title="Nazwa">
                    <EditTemplate Context="job">
                        <RadzenTextBox @bind-Value="job.Name" Style="width:100%; display: block" Name="Nazwa" />
                        <RadzenRequiredValidator Text="Nazwa nie może być pusta!" Component="Nazwa" Popup="true" />
                        <RadzenLengthValidator Max="50" Text="Maksymalnie 50 znaków!" Component="Nazwa" Popup="true" Style="position: absolute" />
                    </EditTemplate>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="ClientJobViewModel" Property="Priority" Title="Priorytet">
                    <EditTemplate Context="job">
                        <RadzenDropDown @bind-Value="job.Priority" Data="@generalViewModel.Priorities" TextProperty="Number" ValueProperty="Number" Style="width:100%" Name="Priority" />
                    </EditTemplate>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="ClientJobViewModel" Property="Description" Title="Description">
                    <EditTemplate Context="job">
                        <RadzenTextArea @bind-Value="job.Description" Style="width:100%; display: block" Name="Description" />
                        <RadzenLengthValidator Max="500" Text="Maksymalnie 500 znaków!" Component="Description" Popup="true" Style="position: absolute" />
                    </EditTemplate>
                </RadzenGridColumn>

                <RadzenGridColumn TItem="ClientJobViewModel" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                    <Template Context="job">
                        <RadzenButton Icon="edit" Size="ButtonSize.Medium" Click="@(args => App.ClientJobsPage.EditClientJobRow(job))">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="job">
                        <RadzenButton Icon="save" Size="ButtonSize.Medium" Click="@((args) => App.ClientJobsPage.SaveClientJobRow(job))">
                        </RadzenButton>
                        <RadzenButton Icon="cancel" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Success" Click="@((args) => App.ClientJobsPage.CancelClientJobEdit(job))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="ClientJobViewModel" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="50px">
                    <Template Context="job">
                        <RadzenButton ButtonStyle="ButtonStyle.Warning" Icon="archive" Size="ButtonSize.Medium" Click="@(async (args) => await App.ClientJobsPage.ArchivizeClientJob(job))">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="job">
                    </EditTemplate>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="ClientJobViewModel" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="50px">
                    <Template Context="job">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Medium" Click="@(async (args) => await App.ClientJobsPage.DeleteClientJobRow(job))">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="job">
                    </EditTemplate>
                </RadzenGridColumn>
            </Columns>
        </RadzenGrid>
    </div>

    <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="ArchvizedJobsFilterValue" Data="@App.ActiveClientWithData.ArchivedJobs" TextProperty="Name" ValueProperty="IdString" Change="@(args => App.ClientJobsPage.SelectedArchivizedClientJobChange(args))"
                   Style="margin-bottom: 20px; height:200px;" />

    @if (App.ClientJobsPage.SelectedArchivizedClientJob != null)
    {
        <RadzenCard Style="width:600px; margin-bottom: 20px; height:500px;">
            <div class="row">
                <div class="col-md-6">
                    <div>Wybrane Zadanie:</div>
                    <b>@App.ClientJobsPage.SelectedArchivizedClientJob.Name</b>
                    <RadzenButton>Odzyskaj Klienta</RadzenButton>

                </div>
            </div>
        </RadzenCard>
    }

    @if (App.ActiveClientWithData.SelectedJob == null)
    {
        <RadzenCard>Wybierz zadanie by zobaczyć szcegóły!</RadzenCard>
    }
    else
    {
        <RadzenCard>@App.ActiveClientWithData.SelectedJob.Name</RadzenCard>
    }
}
