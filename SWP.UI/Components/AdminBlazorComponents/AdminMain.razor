@inject AdminBlazorApp App

<nav class="navbar has-shadow is-fixed-top is-white">
    <div class="navbar-brand">
        <a @onclick="ActivateNavBurger" class="navbar-burger @(hamburgerNavActive ? "is-active" : "")">
            <span></span>
            <span></span>
            <span></span>
        </a>
    </div>
    <div class="navbar-menu @(hamburgerNavActive ? "is-active" : "")">
        <div class="navbar-start">
            <a class="navbar-item @(App.ActivePanel == AdminBlazorApp.Panels.Users ? "is-active" : "")" @onclick="@(() => App.SetActivePanel(AdminBlazorApp.Panels.Users))">
                Users
            </a>
            <a class="navbar-item @(App.ActivePanel == AdminBlazorApp.Panels.Database ? "is-active" : "")" @onclick="@(() => App.SetActivePanel(AdminBlazorApp.Panels.Database))">
                Database
            </a>
            <a class="navbar-item @(App.ActivePanel == AdminBlazorApp.Panels.Applications ? "is-active" : "")" @onclick="@(() => App.SetActivePanel(AdminBlazorApp.Panels.Applications))">
                Applications
            </a>
        </div>
        <div class="navbar-end">
            <a class="navbar-item" href="/Index">
                <span>Exit</span>
            </a>
        </div>
    </div>
</nav>

<div class="section">
    <div class="container">
        <RadzenNotification />
        @switch (App.ActivePanel)
        {
            case AdminBlazorApp.Panels.Users:
                <AdminUsers @bind-App="App" />
                break;
            case AdminBlazorApp.Panels.Database:
                <AdminDatabase @bind-App="App" />
                break;
            case AdminBlazorApp.Panels.Applications:
                <AdminApplications @bind-App="App" />
                break;
            case AdminBlazorApp.Panels.Error:
                <AdminError @bind-App="App" />
                break;
            default:
                break;
        }
    </div>
</div>

