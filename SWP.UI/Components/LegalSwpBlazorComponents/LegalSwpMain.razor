@implements IDisposable
@inject NotificationService notificationService
@inject LegalBlazorApp App


@if (App.User.Profile != null)
{
    <div class="sidebar">
        <div class="text-center">
            <img class="mt-4 mb-4" src="/Images/icons8-courthouse-80.png" />
        </div>
        <div class="input-group">
            <div>
                <label class="px-3">Client Name</label>
            </div>

            <Radzen.Blazor.RadzenDropDown AllowClear="true" TValue="string" AllowFiltering="true" Data="@App.Customers" TextProperty="Name" ValueProperty="IdStr" Style="margin-bottom: 20px; width: 180px;" Change="@(args => App.ActiveCustomerChange(args))" />

        </div>
        <p class="explain px-3">Wybierz Klienta by zobaczyc jego sprawy</p>

        <div>
            <ul class="nav flex-column">
                <li class="nav-item px-3">

                    <NavLink class="nav-link" @onclick="@(() => App.SetActivePanel(LegalBlazorApp.Panels.MyApp))">
                        <i><img src="/Images/icons8-application-window-36.png" /></i> Moja Aplikacja
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" @onclick="@(() => App.SetActivePanel(LegalBlazorApp.Panels.Customers))">
                        <i><img src="/Images/icons8-reception-36.png" /></i> Klienci
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" @onclick="@(() => App.SetActivePanel(LegalBlazorApp.Panels.Calendar))">
                        <i><img src="/Images/icons8-calendar-12-36.png" /></i> Kalendarz
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" @onclick="@(() => App.SetActivePanel(LegalBlazorApp.Panels.ErrorPage))">
                        Error Page For TESTS!
                    </NavLink>
                </li>

                @if (App.ActiveCustomerWithData != null)
                {
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" @onclick="@(() => App.SetActivePanel(LegalBlazorApp.Panels.Cases))">
                            <i><img src="/Images/icons8-business-report-36.png" /></i> Sprawy
                        </NavLink>
                    </li>
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" @onclick="@(() => App.SetActivePanel(LegalBlazorApp.Panels.Finance))">
                            <i><img src="/Images/icons8-reception-36.png" /></i> Finanse
                        </NavLink>
                    </li>
                }

            </ul>
        </div>
    </div>

    <div class="not-sidebar px-5 ml-4 mt-5">
        <RadzenNotification />
        @switch (App.ActivePanel)
        {
            case LegalBlazorApp.Panels.Customers:
                <LegalSwpCustomers @bind-App="App" />
                break;
            case LegalBlazorApp.Panels.Calendar:
                <LegalSwpCalendar @bind-App="App" />
                break;
            case LegalBlazorApp.Panels.Cases:
                <LegalSwpCases @bind-App="App" />
                break;
            case LegalBlazorApp.Panels.MyApp:
                <LegalSwpMyApp @bind-App="App" />
                break;
            case LegalBlazorApp.Panels.ErrorPage:
                <LegalSwpError @bind-App="App" />
                break;
            case LegalBlazorApp.Panels.Finance:
                <LegalSwpFinance @bind-App="App" />
                break;
            default:
                <LegalSwpMyApp @bind-App="App" />
                break;
        }

    </div>
}
else
{
    <LegalSwpNoProfileWarning />
}

@code {
    [Parameter]
    public string ActiveUserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await App.Initialize(ActiveUserId);
        App.CallStateHasChanged += new EventHandler(CallStateHasChanged);
    }

    private void CallStateHasChanged(object sender, EventArgs e) => StateHasChanged();

    public void Dispose() => App.CallStateHasChanged -= new EventHandler(CallStateHasChanged);
}
