@using SWP.UI.BlazorApp.LegalApp.Stores.ClientDetails
 
<div class="show-hide tab-section"><button class="show-hide-btn show-hide-btn-1"><span>Lista Kontaktów</span></button></div>
    <div class="row-section">

        <RadzenTemplateForm Data="@ClientDetailsStore.GetState().NewContact" Submit="@(async (CreateContactPerson.Request args) => { await ClientDetailsStore.SubmitNewContact(args); })">
            <RadzenFieldset Text="Osoba Kontaktowa">
                <div class="form">
                    <i class="user-icon"><img src="/Images/icons8-reception-36.png" /></i>

                    @if (contactsListInfoVisible)
                    {
                        <div class="info-text">
                            <p>Zarządzaj listą swoich klientów. Użyj guzika "Dodaj Nowego Klienta",aby uzupełnić listę kontaktów.</p>
                            <p>Edytuj oraz usuwaj Klientów z głównej listy. Tekst do zupełnienia.</p>
                        </div>
                    }
                    <button class="info" @onclick="ShowHideContactsI"></button>

                </div>
                <div class="form">
                    <div class="text">
                        <div class="label">
                            <RadzenLabel Text="Imię" />
                        </div>
                        <RadzenTextArea Placeholder="Imię..." @bind-Value="ClientDetailsStore.GetState().NewContact.Name" style="@(Gvm.FormInputBoxWidth)" Name="Name" />
                        <RadzenRequiredValidator Component="Name" Text="Imię nie może być puste!" />
                        <RadzenLengthValidator Max="50" Text="Maksymalnie 50 znaków!" Component="Name" Style="position: absolute" />
                    </div>
                    <div class="text">
                        <div class="label">
                            <RadzenLabel Text="Nazwisko" />
                        </div>
                        <RadzenTextArea Placeholder="Nazwisko..." @bind-Value="ClientDetailsStore.GetState().NewContact.Surname" style="@(Gvm.FormInputBoxWidth)" Name="Surname" />
                        <RadzenRequiredValidator Component="Surname" Text="Nazwisko nie może być puste!" style="width: 100%;" />
                        <RadzenLengthValidator Max="50" Text="Maksymalnie 50 znaków!" Component="Surname" Style="position: absolute" />
                    </div>
                    <div class="text">
                        <div class="label">
                            <RadzenLabel Text="Adres" />
                        </div>
                        <RadzenTextArea Placeholder="Adres..." @bind-Value="ClientDetailsStore.GetState().NewContact.Address" style="@(Gvm.FormInputBoxWidth)" Name="Address" />
                        <RadzenLengthValidator Max="500" Text="Maksymalnie 500 znaków!" Component="Address" Style="position: absolute" />
                    </div>
                </div>
                <div class="form">
                    <div class="text">
                        <div class="label">
                            <RadzenLabel Text="Telefon" />
                        </div>
                        <RadzenTextBox Placeholder="Telefon..." @bind-Value="ClientDetailsStore.GetState().NewContact.PhoneNumber" style="@(Gvm.FormInputBoxWidth)" Name="PhoneNumber1" />
                        <RadzenLengthValidator Max="50" Text="Maksymalnie 50 znaków!" Component="PhoneNumber1" Style="position: absolute" />
                    </div>
                    <div class="text">
                        <div class="label">
                            <RadzenLabel Text="Telefon2" />
                        </div>
                        <RadzenTextBox Placeholder="Telefon..." @bind-Value="ClientDetailsStore.GetState().NewContact.AlternativePhoneNumber" style="@(Gvm.FormInputBoxWidth)" Name="PhoneNumber2" />
                        <RadzenLengthValidator Max="50" Text="Maksymalnie 50 znaków!" Component="PhoneNumber2" Style="position: absolute" />
                    </div>
                    <div class="text">
                        <div class="label">
                            <RadzenLabel Text="Email" />
                        </div>
                        <RadzenTextBox Placeholder="Adres Email..." @bind-Value="ClientDetailsStore.GetState().NewContact.Email" style="@(Gvm.FormInputBoxWidth)" Name="Email" />
                        <RadzenEmailValidator Component="Email" Text="Nieprawidłowy adres Email!" />
                        <RadzenLengthValidator Max="50" Text="Maksymalnie 50 znaków!" Component="Email" Style="position: absolute" />
                    </div>
                </div>
                <div class="form-btn">
                    <div class="btn-add">
                        <div>
                            <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Zapisz Kontakt" ButtonStyle="ButtonStyle.Secondary" Style="@(Gvm.GeneralButton)" />
                        </div>
                    </div>
                </div>
            </RadzenFieldset>
        </RadzenTemplateForm>

        <RadzenGrid @ref="ClientDetailsStore.GetState().ContactsGrid" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true"
                    Data="@MainStore.GetState().ActiveClient.ContactPeople" TItem="ContactPersonViewModel" RowUpdate="@ClientDetailsStore.OnUpdateContactRow" RowSelect="@(args => ClientDetailsStore.ContactSelected(args))">
            <Columns>
                <RadzenGridColumn TItem="ContactPersonViewModel" Property="Name" Title="Nazwa">
                    <Template Context="contact">
                        <span Style="@(Gvm.TableFontSize)">@(contact.Name)</span>
                    </Template>
                    <EditTemplate Context="contact">
                        <RadzenTextBox @bind-Value="contact.Name" Name="Name" Style="@(Gvm.FormInputBoxWidth)" />
                        <RadzenRequiredValidator Text="Inię nie może być puste!" Component="Name" Popup="true" />
                        <RadzenLengthValidator Max="50" Text="Maksymalnie 50 znaków!" Component="Name" Popup="true" />
                    </EditTemplate>
                </RadzenGridColumn>

                <RadzenGridColumn TItem="ContactPersonViewModel" Property="Surname" Title="Nazwisko">
                    <Template Context="contact">
                        <span Style="@(Gvm.TableFontSize)">@(contact.Surname)</span>
                    </Template>
                    <EditTemplate Context="contact">
                        <RadzenTextBox @bind-Value="contact.Surname" Name="Surname" Style="@(Gvm.FormInputBoxWidth)" />
                        <RadzenRequiredValidator Text="Nazwosko nie może być puste!" Component="Surname" Popup="true" />
                        <RadzenLengthValidator Max="50" Text="Maksymalnie 50 znaków!" Component="Surname" Popup="true" />
                    </EditTemplate>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="ContactPersonViewModel" Property="Email" Title="Email" Width="100px">
                    <Template Context="contact">
                        <span Style="@(Gvm.TableFontSize)">@(contact.Email)</span>
                    </Template>
                    <EditTemplate Context="contact">
                        <RadzenTextBox @bind-Value="contact.Email" Name="Nazwa" Style="@(Gvm.FormInputBoxWidth)" />
                    </EditTemplate>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="ContactPersonViewModel" Property="PhoneNumber" Title="Telefon">
                    <Template Context="contact">
                        <span Style="@(Gvm.TableFontSize)">@(contact.PhoneNumber)</span>
                    </Template>
                    <EditTemplate Context="contact">
                        <RadzenTextBox @bind-Value="contact.PhoneNumber" Name="PhoneNumber" Style="@(Gvm.FormInputBoxWidth)" />
                    </EditTemplate>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="ContactPersonViewModel" Property="AlternativePhoneNumber" Title="Drugi Telefon">
                    <Template Context="contact">
                        <span Style="@(Gvm.TableFontSize)">@(contact.AlternativePhoneNumber)</span>
                    </Template>
                    <EditTemplate Context="contact">
                        <RadzenTextBox @bind-Value="contact.AlternativePhoneNumber" Name="AlternativePhoneNumber" Style="@(Gvm.FormInputBoxWidth)" />
                    </EditTemplate>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="ContactPersonViewModel" Property="Address" Title="Addres">
                    <Template Context="contact">
                        <span Style="@(Gvm.TableFontSize)">@(contact.Address)</span>
                    </Template>
                    <EditTemplate Context="contact">
                        <RadzenTextBox @bind-Value="contact.Address" Name="Address" Style="@(Gvm.FormInputBoxWidth)" />
                    </EditTemplate>
                </RadzenGridColumn>

                <RadzenGridColumn TItem="ContactPersonViewModel" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                    <Template Context="c">
                        <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => ClientDetailsStore.EditContactRow(c))" MouseEnter="@(args => ShowTooltip(args, new TooltipOptions { Text = "Edytuj", Style=Gvm.ToolTipStyle }))">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="c">
                        <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => ClientDetailsStore.SaveContactRow(c))" MouseEnter="@(args => ShowTooltip(args, new TooltipOptions { Text = "Zapisz", Style=Gvm.ToolTipStyle }))">
                        </RadzenButton>
                        <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Success" Click="@((args) => ClientDetailsStore.CancelContactEdit(c))" MouseEnter="@(args => ShowTooltip(args, new TooltipOptions { Text = "Anuluj", Style=Gvm.ToolTipStyle }))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="ContactPersonViewModel" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                    <Template Context="c">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(async (args) => await ClientDetailsStore.DeleteContactRow(c))" MouseEnter="@(args => ShowTooltip(args, new TooltipOptions { Text = "Zamknij", Style=Gvm.ToolTipStyle }))">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="client">
                    </EditTemplate>
                </RadzenGridColumn>
            </Columns>
        </RadzenGrid>
        @if (ClientDetailsStore.GetState().SelectedContact != null)
        {
            <div class="details">
                <p><strong>Imię:</strong> @ClientDetailsStore.GetState().SelectedContact.Name</p>
                <p><strong>Nazwisko:</strong> @ClientDetailsStore.GetState().SelectedContact.Surname</p>
                <p><strong>Telefon:</strong> @ClientDetailsStore.GetState().SelectedContact.PhoneNumber</p>
                <p><strong>Telefon 2:</strong> @ClientDetailsStore.GetState().SelectedContact.AlternativePhoneNumber</p>
                <p><strong>Adres:</strong> @ClientDetailsStore.GetState().SelectedContact.Address</p>
                <p><strong>Zmienione przez:</strong> @ClientDetailsStore.GetState().SelectedContact.UpdatedBy</p>
                <p><strong>Data zmiany:</strong>@ClientDetailsStore.GetState().SelectedContact.Updated</p>
                <p><strong>Data utworzenia:</strong> @ClientDetailsStore.GetState().SelectedContact.Created</p>
            </div>
        }
    </div>


@code {

    private void ShowTooltip(ElementReference elementReference, TooltipOptions options = null) => TooltipService.Open(elementReference, options.Text, options);

}