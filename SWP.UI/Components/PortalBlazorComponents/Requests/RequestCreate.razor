<div>
    <RadzenSteps NextText="Dalej" PreviousText="Wróć">
        <Steps>
            <RadzenStepsItem Text="Wybierz Aplikcaję, której dotyczy zgłoszenie">
                <RadzenRadioButtonList @bind-Value="Store.GetState().StepsConfig.ChosenApplication" TValue="int" Orientation="Orientation.Vertical" Change="((args) => SelectedRequestApplicationChange(args))">
                    <Items>
                        @foreach (var item in Enum.GetValues(typeof(ApplicationType)).Cast<ApplicationType>().ToList())
                        {
                            <RadzenRadioButtonListItem Text="@RequestViewModel.ApplicationssDisplay()[(int)item]" Value="(int)item" />
                        }
                    </Items>
                </RadzenRadioButtonList>
            </RadzenStepsItem>
            <RadzenStepsItem Text="Wybierz Temat">
                <RadzenRadioButtonList @bind-Value="Store.GetState().StepsConfig.ChosenRequestReason" TValue="int" Orientation="Orientation.Vertical" Change="((args) => SelectedRequestSubjectChange(args))">
                    <Items>
                        @switch ((ApplicationType)Store.GetState().StepsConfig.ChosenApplication)
                        {
                            case ApplicationType.LegalApplication:
                                @if (!Store.GetState().UserLicenses.Any(x => x.Application == ((ApplicationType)Store.GetState().StepsConfig.ChosenApplication).ToString()))
                                {
                                    <RadzenRadioButtonListItem Text="@RequestViewModel.RequestReasonsDisplay()[(int)RequestReason.PurchaseLicense]" Value="(int)RequestReason.PurchaseLicense" />
                                }
                                else
                                {
                                    <RadzenRadioButtonListItem Text="@RequestViewModel.RequestReasonsDisplay()[(int)RequestReason.ModifyLicense]" Value="(int)RequestReason.ModifyLicense" />
                                }

                                <RadzenRadioButtonListItem Text="@RequestViewModel.RequestReasonsDisplay()[(int)RequestReason.Query]" Value="(int)RequestReason.Query" />
                                <RadzenRadioButtonListItem Text="@RequestViewModel.RequestReasonsDisplay()[(int)RequestReason.RequestDemo]" Value="(int)RequestReason.RequestDemo" />
                                <RadzenRadioButtonListItem Text="@RequestViewModel.RequestReasonsDisplay()[(int)RequestReason.TechnicalIssue]" Value="(int)RequestReason.TechnicalIssue" />
                                break;
                            case ApplicationType.NoApp:
                                <RadzenRadioButtonListItem Text="@RequestViewModel.RequestReasonsDisplay()[(int)RequestReason.Query]" Value="(int)RequestReason.Query" />
                                <RadzenRadioButtonListItem Text="@RequestViewModel.RequestReasonsDisplay()[(int)RequestReason.TechnicalIssue]" Value="(int)RequestReason.TechnicalIssue" />
                                break;
                            default:
                                break;
                        }
                    </Items>
                </RadzenRadioButtonList>
            </RadzenStepsItem>
            <RadzenStepsItem Text="Szczegóły Zgłoszenia">
                <RadzenTemplateForm Data="@Store.GetState().NewRequest" Submit="@((CreateRequest.Request args) => SubmitNewRequest(args))">
                    <RadzenFieldset Text="Nowe Zgłoszenie">

                        <h2>Aplikacja: @($"{RequestViewModel.ApplicationssDisplay()[Store.GetState().StepsConfig.ChosenApplication]}")</h2>
                        <h2>Temat : @($"{RequestViewModel.RequestReasonsDisplay()[Store.GetState().StepsConfig.ChosenRequestReason]}")</h2>

                        @if (!Store.GetState().UserLicenses.Any(x => x.Application == ((ApplicationType)Store.GetState().StepsConfig.ChosenApplication).ToString()) && Store.GetState().StepsConfig.NewRequestReason == RequestReason.PurchaseLicense)
                        {
                            <div class="label pb-2">
                                <RadzenLabel Text="Koniec Licencji" />
                                <RadzenNumeric TValue="int" @bind-Value="Store.GetState().NewRequest.LicenseMonths" Min="1" Name="LicenseMonths" />
                                <RadzenNumericRangeValidator Component="LicenseMonths" Min="1" Text="Minimalny czas licencji to 1 miesiąc od zaksięgowania zapłaty." Popup="false" Style="position: absolute" />
                            </div>
                        }

                        @if (Store.GetState().UserLicenses.Any(x => x.Application == ((ApplicationType)Store.GetState().StepsConfig.ChosenApplication).ToString()) && Store.GetState().StepsConfig.NewRequestReason == RequestReason.ModifyLicense)
                        {
                            var license = Store.GetState().UserLicenses.FirstOrDefault(x => x.Application == ((ApplicationType)Store.GetState().StepsConfig.ChosenApplication).ToString());

                            <p class="pt-2">Obecna licencja jest ważna do: @($"{license.ValidTo.ToString("dd/MM/yyyy")}")</p>

                            if (license.RelatedUsers > Store.GetState().NewRequest.RelatedUsers)
                            {
                                Store.SetRelatedUsersNumber(license.RelatedUsers);
                            }

                            <div class="label pb-2">
                                <RadzenLabel Text="Przedłuż licencję" />
                                <RadzenNumeric TValue="int" @bind-Value="Store.GetState().NewRequest.LicenseMonths" Min="1" Name="LicenseMonths" />
                                <RadzenNumericRangeValidator Component="LicenseMonths" Min="1" Text="Minimalny czas licencji to 1 miesiąc od zaksięgowania zapłaty." Popup="false" Style="position: absolute" />
                            </div>

                            <p class="pt-2">Zmiana liczby powiązanych użytkowników</p>
                            <RadzenNumeric TValue="int" @bind-Value="Store.GetState().NewRequest.RelatedUsers" Min="@license.RelatedUsers" Name="RelatedUsers" />
                            <RadzenNumericRangeValidator Component="RelatedUsers" Min="@license.RelatedUsers" Text="Można dodawać użytkowników powiązanych, nie usuwać." Popup="false" Style="position: absolute" />
                        }

                        <div class="text pb-4 pt-2">
                            <div class="label pb-2">
                                <RadzenLabel Text="Wiadomość" />
                            </div>
                            <RadzenTextArea Placeholder="Wiadomość..." @bind-Value="Store.GetState().NewRequest.RequestMessage.Message" Name="RequestMessage" Style="width: 400px; height: 250px;" />
                            <RadzenRequiredValidator Component="RequestMessage" Text="Proszę krótko opisać problem / pytanie." Popup="true" />
                            <RadzenLengthValidator Max="1000" Text="Maksymalnie 1000 znaków!" Component="RequestMessage" />
                        </div>
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Wyślij" ButtonStyle="ButtonStyle.Secondary" />
                    </RadzenFieldset>
                </RadzenTemplateForm>

                @switch (Store.GetState().StepsConfig.NewRequestReason)
                {
                    case RequestReason.Query:
                        break;
                    case RequestReason.RequestDemo:
                        break;
                    case RequestReason.TechnicalIssue:
                        break;
                    default:
                        break;
                }
            </RadzenStepsItem>
        </Steps>
    </RadzenSteps>
</div>

